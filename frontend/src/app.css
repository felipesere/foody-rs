/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */
html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

/* Remove default margin in favour of better control in authored CSS */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd,
ul,
ol {
  margin-block-end: 0;
}

p {
  margin-block-start: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
  padding-inline-start: 0;
  margin-block-start: 0;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  line-height: 1.5;
}

/* Set shorter line heights on headings and interactive elements */
h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */
textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}

/* Actual stuff... */

body {
  /* font-family: Helvetica, Sans-Serif, serif; */
  font-family: "SF Mono", sans-serif;
  margin: 0;

  --dark-gray: #495057;
  --gray: #ced4da;
  --light-gray: #e9ecef;
  --danger-gray: #212529;

  --dense: 3;
  --medium: 7;
  --loose: 11;
}

.horizontal {
  display: flex;
  flex-direction: row;
}

.vertical {
  display: flex;
  flex-direction: column;
}

.space-between {
  justify-content: space-between;
}

.content-grid {
  --max-content-width: 69.735rem;
  display: grid;
  grid-template-columns:
    [full-width-start] minmax(1rem, 1fr)
    [content-start] min(100% - 2rem, var(--max-content-width)) [content-end]
    minmax(1rem, 1fr) [full-width-end];
}

.half-width {
  --max-content-width: 50%;
}

.content-grid > * {
  grid-column: content;
}

.content-grid > .full-width {
  grid-column: full-width;
}

.bottom-line {
  border-bottom: solid 2px black;
}

.small-text {
  font-size: 8px;
}

.large-text {
  font-size: 24px;
}

nav {
  padding-top: 1rem;
}

nav > ul {
  margin-bottom: 1rem;
}

a {
  color: black;
  background-color: white;
}

a:hover {
  background-color: var(--gray);
}

.uppercase {
  text-transform: uppercase;
}

.heavy-text {
  font-weight: 900;
  letter-spacing: 1px;
}

.light-text {
  font-weight: 300;
  color: var(--dark-gray);
}

.ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.black-border {
  border: 2px solid black;
}

.double-border {
  border: 4px double black;
}

.small-padding {
  padding: 0.5rem;
}

.stack > * + * {
  margin-top: 1rem;
}

.h-stack > * + * {
  margin-left: 1rem;
}


.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  justify-content: flex-start;
  align-items: center;
}

.active {
  background-color: var(--light-gray);
}

.shoppinglist {
  display: grid;
  max-width: 400px;
  gap: 1rem;
  grid-template-columns: [column-1] 220px [column-2] 1fr;
}

.card {
  display: flex;
  flex-direction: row;
}

.card__extras {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.shoppinglist > .subgrid {
  grid-column: span 2;

  display: grid;
  grid-template-columns: subgrid;
}

/* ################### */

.recipes {
  display: grid;
  gap: 1rem;
  grid-auto-columns: 2fr max-content 100px;
}

.container {
  container-type: inline-size;
}

@container (min-width: 700px) {
  .recipes .subgrid {
    grid-column: span 3;

    display: grid;
    grid-template-columns: subgrid;
  }
}

.recipe_book_title {
  margin-right: 1rem;
}

.shadow {
  --shadow-size: 3;
  box-shadow: calc(var(--shadow-size) * 1px) calc(var(--shadow-size) * 1px) 0px
    0px var(--gray);
}

.shadow.danger {
  box-shadow: none;
}

.card__content {
  flex-grow: 1;
}

.ingredient {
  text-transform: capitalize;
  margin-left: 1rem;
}

hr {
  width: 100%;
  border-top: 1px solid black;
  color: black;
  text-align: center;
}

input[type="checkbox"] {
  /* Add if not using autoprefixer */
  -webkit-appearance: none;
  appearance: none;
  /* For iOS < 15 to remove gradient background */
  background-color: #fff;
  /* Not removed via appearance */
  margin: 0;

  font: inherit;
  color: currentColor;
  width: 1.15em;
  height: 1.15em;
  border: 0.2em solid currentColor;
  border-radius: 0em;
  /* nudging to align with label, which I may not have: */
  transform: translateY(+0.2em);

  display: grid;
  place-content: center;
}

input[type="checkbox"]::before {
  content: "";
  width: 0.65em;
  height: 0.65em;
  transform: scale(0);
  box-shadow: inset 1em 1em black;
  /* Optional: */
  transition: 120ms transform ease-in-out;
  transform-origin: bottom left;
  clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
}

input[type="checkbox"]:checked::before {
  transform: scale(1);
}

button,
input[type="button"] {
  color: black;
  border: 2px solid black;
  background-color: var(--gray);
  max-height: calc(1lh + 6px); /* line-height plus padding plus border */
  cursor: pointer;
}

input[type="text"],
input[type="password"] {
  outline: none;
  font-size: 1rem; /* 16px? */
  border: 2px solid black;
  height: 39px;
  padding: 0.5rem;
}

input:focus {
  padding: 0 2px 0 0;
  border: 4px inset black;
  border-radius: 0;
}

.details__extended > * + * {
  margin-top: 0.5rem;
}

button.secondary {
  background-color: var(--light-gray);
}

button.danger {
  background-color: var(--danger-gray);
  color: white;
}

.dotted-line {
  flex: auto;

  background: white;
  background-image: linear-gradient(
    to right,
    black 20%,
    rgba(255, 255, 255, 0) 0%
  );
  background-size: 10px 2px;
  background-position: bottom 0.25lh left;
  background-repeat: repeat-x;
  margin-left: 2px;
  margin-right: 2px;
}

/* Background */
.dotted-bg {
  --density: 10;
  background: white;
  background-image: radial-gradient(black 1px, transparent 0);
  background-size: calc(var(--density) * 1px) calc(var(--density) * 1px);
  background-position: calc(var(--density) * -0.5px)
    calc(var(--density) * -0.5px);
}

.stripped-bg {
  --density: 10;
  background: repeating-linear-gradient(
    -45deg,
    black,
    black 1px,
    white 1px,
    white calc(var(--density) * 1px)
  );
}
