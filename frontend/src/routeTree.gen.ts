/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthIndexRouteImport } from './routes/_auth.index'
import { Route as AuthMealplanRouteImport } from './routes/_auth.mealplan'
import { Route as AuthIngredientsRouteImport } from './routes/_auth.ingredients'
import { Route as AuthTagsIndexRouteImport } from './routes/_auth.tags.index'
import { Route as AuthRecipesIndexRouteImport } from './routes/_auth.recipes.index'
import { Route as AuthShoppinglistShoppinglistIdRouteImport } from './routes/_auth.shoppinglist.$shoppinglistId'
import { Route as AuthRecipesNewRouteImport } from './routes/_auth.recipes/new'
import { Route as AuthRecipesRecipeIdRouteImport } from './routes/_auth.recipes/$recipeId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthMealplanRoute = AuthMealplanRouteImport.update({
  id: '/mealplan',
  path: '/mealplan',
  getParentRoute: () => AuthRoute,
} as any)
const AuthIngredientsRoute = AuthIngredientsRouteImport.update({
  id: '/ingredients',
  path: '/ingredients',
  getParentRoute: () => AuthRoute,
} as any)
const AuthTagsIndexRoute = AuthTagsIndexRouteImport.update({
  id: '/tags/',
  path: '/tags/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthRecipesIndexRoute = AuthRecipesIndexRouteImport.update({
  id: '/recipes/',
  path: '/recipes/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthShoppinglistShoppinglistIdRoute =
  AuthShoppinglistShoppinglistIdRouteImport.update({
    id: '/shoppinglist/$shoppinglistId',
    path: '/shoppinglist/$shoppinglistId',
    getParentRoute: () => AuthRoute,
  } as any)
const AuthRecipesNewRoute = AuthRecipesNewRouteImport.update({
  id: '/recipes/new',
  path: '/recipes/new',
  getParentRoute: () => AuthRoute,
} as any)
const AuthRecipesRecipeIdRoute = AuthRecipesRecipeIdRouteImport.update({
  id: '/recipes/$recipeId',
  path: '/recipes/$recipeId',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/ingredients': typeof AuthIngredientsRoute
  '/mealplan': typeof AuthMealplanRoute
  '/': typeof AuthIndexRoute
  '/recipes/$recipeId': typeof AuthRecipesRecipeIdRoute
  '/recipes/new': typeof AuthRecipesNewRoute
  '/shoppinglist/$shoppinglistId': typeof AuthShoppinglistShoppinglistIdRoute
  '/recipes': typeof AuthRecipesIndexRoute
  '/tags': typeof AuthTagsIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/ingredients': typeof AuthIngredientsRoute
  '/mealplan': typeof AuthMealplanRoute
  '/': typeof AuthIndexRoute
  '/recipes/$recipeId': typeof AuthRecipesRecipeIdRoute
  '/recipes/new': typeof AuthRecipesNewRoute
  '/shoppinglist/$shoppinglistId': typeof AuthShoppinglistShoppinglistIdRoute
  '/recipes': typeof AuthRecipesIndexRoute
  '/tags': typeof AuthTagsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/ingredients': typeof AuthIngredientsRoute
  '/_auth/mealplan': typeof AuthMealplanRoute
  '/_auth/': typeof AuthIndexRoute
  '/_auth/recipes/$recipeId': typeof AuthRecipesRecipeIdRoute
  '/_auth/recipes/new': typeof AuthRecipesNewRoute
  '/_auth/shoppinglist/$shoppinglistId': typeof AuthShoppinglistShoppinglistIdRoute
  '/_auth/recipes/': typeof AuthRecipesIndexRoute
  '/_auth/tags/': typeof AuthTagsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/ingredients'
    | '/mealplan'
    | '/'
    | '/recipes/$recipeId'
    | '/recipes/new'
    | '/shoppinglist/$shoppinglistId'
    | '/recipes'
    | '/tags'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/ingredients'
    | '/mealplan'
    | '/'
    | '/recipes/$recipeId'
    | '/recipes/new'
    | '/shoppinglist/$shoppinglistId'
    | '/recipes'
    | '/tags'
  id:
    | '__root__'
    | '/_auth'
    | '/login'
    | '/_auth/ingredients'
    | '/_auth/mealplan'
    | '/_auth/'
    | '/_auth/recipes/$recipeId'
    | '/_auth/recipes/new'
    | '/_auth/shoppinglist/$shoppinglistId'
    | '/_auth/recipes/'
    | '/_auth/tags/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/mealplan': {
      id: '/_auth/mealplan'
      path: '/mealplan'
      fullPath: '/mealplan'
      preLoaderRoute: typeof AuthMealplanRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/ingredients': {
      id: '/_auth/ingredients'
      path: '/ingredients'
      fullPath: '/ingredients'
      preLoaderRoute: typeof AuthIngredientsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/tags/': {
      id: '/_auth/tags/'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof AuthTagsIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/recipes/': {
      id: '/_auth/recipes/'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof AuthRecipesIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/shoppinglist/$shoppinglistId': {
      id: '/_auth/shoppinglist/$shoppinglistId'
      path: '/shoppinglist/$shoppinglistId'
      fullPath: '/shoppinglist/$shoppinglistId'
      preLoaderRoute: typeof AuthShoppinglistShoppinglistIdRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/recipes/new': {
      id: '/_auth/recipes/new'
      path: '/recipes/new'
      fullPath: '/recipes/new'
      preLoaderRoute: typeof AuthRecipesNewRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/recipes/$recipeId': {
      id: '/_auth/recipes/$recipeId'
      path: '/recipes/$recipeId'
      fullPath: '/recipes/$recipeId'
      preLoaderRoute: typeof AuthRecipesRecipeIdRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthIngredientsRoute: typeof AuthIngredientsRoute
  AuthMealplanRoute: typeof AuthMealplanRoute
  AuthIndexRoute: typeof AuthIndexRoute
  AuthRecipesRecipeIdRoute: typeof AuthRecipesRecipeIdRoute
  AuthRecipesNewRoute: typeof AuthRecipesNewRoute
  AuthShoppinglistShoppinglistIdRoute: typeof AuthShoppinglistShoppinglistIdRoute
  AuthRecipesIndexRoute: typeof AuthRecipesIndexRoute
  AuthTagsIndexRoute: typeof AuthTagsIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIngredientsRoute: AuthIngredientsRoute,
  AuthMealplanRoute: AuthMealplanRoute,
  AuthIndexRoute: AuthIndexRoute,
  AuthRecipesRecipeIdRoute: AuthRecipesRecipeIdRoute,
  AuthRecipesNewRoute: AuthRecipesNewRoute,
  AuthShoppinglistShoppinglistIdRoute: AuthShoppinglistShoppinglistIdRoute,
  AuthRecipesIndexRoute: AuthRecipesIndexRoute,
  AuthTagsIndexRoute: AuthTagsIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
