//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::models::custom_db_types::JsonStringArray;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "recipes")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub name: String,
    pub book_title: Option<String>,
    pub book_page: Option<i32>,
    pub website_url: Option<String>,
    pub source: String,
    #[sea_orm(column_type = "Text")]
    pub tags: JsonStringArray,
    pub rating: i32,
    #[sea_orm(column_type = "Text")]
    pub notes: String,
    pub duration: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ingredients_in_recipes::Entity")]
    IngredientsInRecipes,
    #[sea_orm(has_many = "super::ingredients_in_shoppinglists::Entity")]
    IngredientsInShoppinglists,
    #[sea_orm(has_many = "super::meals_in_meal_plans::Entity")]
    MealsInMealPlans,
}

impl Related<super::ingredients_in_recipes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IngredientsInRecipes.def()
    }
}

impl Related<super::ingredients_in_shoppinglists::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IngredientsInShoppinglists.def()
    }
}

impl Related<super::meals_in_meal_plans::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MealsInMealPlans.def()
    }
}
