//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ingredients_in_shoppinglists")]
pub struct Model {
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub in_basket: bool,
    pub shoppinglists_id: i32,
    pub ingredients_id: i32,
    pub quantities_id: i32,
    pub recipe_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub note: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ingredients::Entity",
        from = "Column::IngredientsId",
        to = "super::ingredients::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Ingredients,
    #[sea_orm(
        belongs_to = "super::quantities::Entity",
        from = "Column::QuantitiesId",
        to = "super::quantities::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Quantities,
    #[sea_orm(
        belongs_to = "super::recipes::Entity",
        from = "Column::RecipeId",
        to = "super::recipes::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Recipes,
    #[sea_orm(
        belongs_to = "super::shoppinglists::Entity",
        from = "Column::ShoppinglistsId",
        to = "super::shoppinglists::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Shoppinglists,
}

impl Related<super::ingredients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ingredients.def()
    }
}

impl Related<super::quantities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Quantities.def()
    }
}

impl Related<super::recipes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipes.def()
    }
}

impl Related<super::shoppinglists::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Shoppinglists.def()
    }
}
